# all checked!!! returns 256x256 matrix
import math
import numpy as np
from scipy.signal import convolve2d

def constructGGt(h,K,rows,cols):
    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    # % Eigen-decomposition for super-resolution
    # % Stanley Chan
    # %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    # hth = conv2(h,rot90(h,2)); #h=(9x9)
    hth = convolve2d(h, np.rot90(h,2)) # hth=(17x17)

    # yc = ceil(size(hth,1)/2);  % mark the center coordinate
    yc = math.ceil(len(hth)/2)
    # xc = ceil(size(hth,2)/2);
    xc = math.ceil(len(hth[0])/2)

    # L = floor(size(hth,1)/K);  % width of the new filter
                               # %  = (1/k) with of the original filter
    L = math.floor(len(hth)/K)

    # g = zeros(L,L);            % initialize new filter
    g = np.zeros((L,L))

    # for i=-floor(L/2):floor(L/2)
    #     for j=-floor(L/2):floor(L/2)
    #         g(i+floor(L/2)+1,j+floor(L/2)+1) = hth(yc+K*i, xc+K*j);
    #     end
    # end
    for i in range(-math.floor(L/2), math.floor(L/2)):
        for j in range(-math.floor(L/2), math.floor(L/2)):
            g[i+math.floor(L/2), j+math.floor(L/2)] = hth[yc+K*i-1, xc+K*j-1]

    return abs(np.fft.fft2(g,(int(rows/K),int(cols/K))))

# [[1.79106360847719e-08, 5.93118808814885e-07, 7.22566630636698e-06, 3.23831897111549e-05, 5.33908536898986e-05, 3.23831897111549e-05, 7.22566630636698e-06, 5.93118808814885e-07, 1.79106360847719e-08],
# [5.93118808814885e-07, 1.96413974191062e-05, 0.000239281205438037, 0.00107238396314897, 0.00176806225040141, 0.00107238396314897, 0.000239281205438037, 1.96413974191062e-05, 5.93118808814885e-07],
# [7.22566630636698e-06, 0.000239281205438037, 0.00291504184015874, 0.0130643111546176, 0.0215394076876630, 0.0130643111546176, 0.00291504184015874, 0.000239281205438037, 7.22566630636698e-06],
# [3.23831897111549e-05, 0.00107238396314897, 0.0130643111546176, 0.0585501805131453, 0.0965329280153547, 0.0585501805131453, 0.0130643111546176, 0.00107238396314897, 3.23831897111549e-05],
# [5.33908536898986e-05, 0.00176806225040141, 0.0215394076876630, 0.0965329280153547, 0.159155891741880, 0.0965329280153547, 0.0215394076876630, 0.00176806225040141, 5.33908536898986e-05],
# [3.23831897111549e-05, 0.00107238396314897, 0.0130643111546176, 0.0585501805131453, 0.0965329280153547, 0.0585501805131453, 0.0130643111546176, 0.00107238396314897, 3.23831897111549e-05],
# [7.22566630636698e-06, 0.000239281205438037, 0.00291504184015874, 0.0130643111546176, 0.0215394076876630, 0.0130643111546176, 0.00291504184015874, 0.000239281205438037, 7.22566630636698e-06],
# [5.93118808814885e-07, 1.96413974191062e-05, 0.000239281205438037, 0.00107238396314897, 0.00176806225040141, 0.00107238396314897, 0.000239281205438037, 1.96413974191062e-05, 5.93118808814885e-07],
# [1.79106360847719e-08, 5.93118808814885e-07, 7.22566630636698e-06, 3.23831897111549e-05, 5.33908536898986e-05, 3.23831897111549e-05, 7.22566630636698e-06, 5.93118808814885e-07, 1.79106360847719e-08]]
